#cloud-config

# Install required packages
packages:
 - wireguard
 - net-tools
 - iptables
 - vim
%{ for extra_package in extra_packages ~}
 - ${extra_package}
%{ endfor ~}

# Create new admin user
users:
  - name: ${admin_username}
    shell: /bin/bash
    ssh_authorized_keys:
      - %{ if !enable_ssh_access }command="/opt/get_wireguard_status" %{ endif }${admin_ssh_pubkey}
    sudo: ALL=(ALL) NOPASSWD:ALL

write_files:
  # Create Wireguard config file
  # NOTE: private key will be created and set by runcmd
  - path: /etc/wireguard/wg0.conf
    owner: root:root
    permissions: "0600"
    content: |
      [Interface]
      SaveConfig = false
      Address = 10.77.67.1
      ListenPort = ${wg_port}
      PostUp = iptables -t filter -A FORWARD -i wg0 -j ACCEPT
      PostUp = iptables -t nat -A POSTROUTING -o ${public_iface} -j MASQUERADE
      PreDown = iptables -t filter -D FORWARD -i wg0 -j ACCEPT
      PreDown = iptables -t nat -D POSTROUTING -o ${public_iface} -j MASQUERADE
%{ if wg_server_prikey != "" ~}
      PrivateKey = ${wg_server_prikey}
%{ else ~}
      PrivateKey = WG_SRV_PRI
%{ endif ~}

      [Peer]
      PublicKey = ${wg_client_pubkey}
      PresharedKey = ${wg_psk}
      AllowedIPs = 10.77.67.2

  # Add static wireguard private key if needed
%{ if wg_server_prikey != "" ~}
  - path: /etc/wireguard/private.key
    owner: root:root
    permissions: "0600"
    content: ${wg_server_prikey}
%{ endif ~}

  # Also configure SSHd
  - path: /etc/ssh/sshd_config
    owner: root:root
    permissions: "0644"
    append: true
    content: |
      PasswordAuthentication no
      PubkeyAuthentication yes
      AuthenticationMethods publickey
      PermitRootLogin no
      AllowUsers ${admin_username}
      Port ${ssh_port}

  # Add script that allows a remote user to read pubkey
  - path: /opt/get_wireguard_status
    owner: root:root
    permissions: "0755"
    append: true
    content: |
      #!/bin/bash
      set -e -o pipefail
      sudo cloud-init status --wait >/dev/null
      sudo wg >/dev/null
      sudo cat /etc/wireguard/public.key

# Setup Wireguard config and start
runcmd:
 # Ensure iptables works for ssh, which might be a different port
 - sudo bash -c 'iptables -t filter -D INPUT -i ${public_iface} -p tcp --dport 22 -j ACCEPT || true'
 - sudo iptables -t filter -A INPUT -i ${public_iface} -p tcp --dport ${ssh_port} -j ACCEPT
 # Add IPtables rules for anything else
%{ for extra_port in extra_open_ports ~}
 - sudo iptables -t filter -A FORWARD -i ${public_iface} -p tcp --dport ${extra_port} -j ACCEPT
%{ endfor ~}
 # Restart sshd to pick up new config
 - sudo systemctl restart ssh
 # Enable IP Forwarding and create wiereguard keys
 - sudo bash -c "echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf && sysctl -p"
%{ if wg_server_prikey == "" ~}
 - sudo bash -c "wg genkey > /etc/wireguard/private.key && chmod go= /etc/wireguard/private.key"
 - sudo bash -c 'WG_PRI=$(cat /etc/wireguard/private.key); sed -i "s@WG_SRV_PRI@$WG_PRI@g" /etc/wireguard/wg0.conf'
%{ endif ~}
 - sudo bash -c "cat /etc/wireguard/private.key | wg pubkey > /etc/wireguard/public.key && chmod go= /etc/wireguard/public.key"
 # Setup wireguard config and start service
 - sudo systemctl enable wg-quick@wg0.service
 - sudo systemctl start wg-quick@wg0.service
%{ if forward_ports ~}
- sudo iptables -t nat -I PREROUTING -i ${public_iface} -p tcp --dport ${ssh_port} -j ACCEPT
- sudo iptables -t nat -I PREROUTING -i ${public_iface} -p udp --dport ${wg_port} -j ACCEPT
- sudo iptables -t nat -A PREROUTING -i ${public_iface} -j DNAT --to 10.77.67.2
- sudo iptables -t filter -A FORWARD -i ${public_iface} -j ACCEPT
- sudo iptables -t nat -A POSTROUTING -o ${public_iface} -j MASQUERADE
%{ endif ~}
%{ for extra_command in extra_commands ~}
 - ${extra_command}
%{ endfor ~}
