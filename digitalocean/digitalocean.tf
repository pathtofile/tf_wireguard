# ------------------------------------------------------
# ------------------------------------------------------
# Access Settings, set  env variable to TF_VAR_xxxx:
variable "api_key" {
  type      = string
  sensitive = true
}

# VM settings:
variable "vm_name" { default = "tfvm" }
variable "location" {
  default  = "sfo3"
  nullable = false
}
variable "vm_size" {
  default  = "s-1vcpu-1gb"
  nullable = false
}
variable "image_name" {
  default  = "ubuntu-22-04-x64"
  nullable = false
}

variable "public_iface" { default = "eth0" }

# Cloud Init settings
variable "init_script_template" { default = "cloud_init.yml.tftpl" }

# SSH settings:
variable "admin_username" { default = "ubuntu" }
variable "ssh_key_pub" { default = "~/.ssh/id_rsa.pub" }
variable "ssh_port" { default = 22 }
# Enable ablility to log into server using ssh
variable "enable_ssh_access" {
  type    = bool
  default = false
}

# Wireguard settings:
variable "wg_port" { default = 51820 }
variable "wg_client_pubkey" { type = string }
variable "wg_psk" {
  type      = string
  sensitive = true
}
# Optional, will be autogenerated by default
variable "wg_server_prikey" {
  type      = string
  sensitive = true
  default   = ""
  nullable  = false
}

# Extra settings
variable "extra_open_ports" {
  type    = list(any)
  default = []
}
variable "extra_packages" {
  type    = list(any)
  default = []
}
variable "extra_commands" {
  type    = list(any)
  default = []
}
variable "forward_ports" {
  type    = bool
  default = false
}

# Unused:
variable "image_publisher" { default = null }
variable "image_version" { default = null }

# ------------------------------------------------------
# ------------------------------------------------------

terraform {
  required_providers {
    digitalocean = {
      source  = "digitalocean/digitalocean"
      version = "~> 2.0"
    }
  }
}

# Set token
provider "digitalocean" {
  token = var.api_key
}

# Create a new SSH key
resource "digitalocean_ssh_key" "tf_keypair" {
  name       = "terraform_keypair"
  public_key = file(var.ssh_key_pub)
}

# Create firewall rules
resource "digitalocean_firewall" "tf_firewall" {
  name = "tf-firewall"

  droplet_ids = [digitalocean_droplet.tf_vm.id]

  inbound_rule {
    protocol         = "tcp"
    port_range       = tostring(var.ssh_port)
    source_addresses = ["0.0.0.0/0", "::/0"]
  }

  inbound_rule {
    protocol         = "udp"
    port_range       = tostring(var.wg_port)
    source_addresses = ["0.0.0.0/0", "::/0"]
  }

  inbound_rule {
    protocol         = "icmp"
    source_addresses = ["0.0.0.0/0", "::/0"]
  }

  # Any extra TCP Ports to open
  dynamic "inbound_rule" {
    for_each = var.extra_open_ports
    content {
      protocol         = "tcp"
      port_range       = tostring(inbound_rule.value)
      source_addresses = ["0.0.0.0/0", "::/0"]
    }
  }

  outbound_rule {
    protocol              = "tcp"
    port_range            = "1-65535"
    destination_addresses = ["0.0.0.0/0", "::/0"]
  }

  outbound_rule {
    protocol              = "udp"
    port_range            = "1-65535"
    destination_addresses = ["0.0.0.0/0", "::/0"]
  }

  outbound_rule {
    protocol              = "icmp"
    destination_addresses = ["0.0.0.0/0", "::/0"]
  }
}

# Create VM
resource "digitalocean_droplet" "tf_vm" {
  image    = var.image_name
  name     = var.vm_name
  region   = var.location
  size     = var.vm_size
  ssh_keys = [digitalocean_ssh_key.tf_keypair.fingerprint]

  user_data = templatefile(
    var.init_script_template,
    {
      wg_client_pubkey  = file(var.wg_client_pubkey),
      wg_psk            = file(var.wg_psk),
      wg_server_prikey  = var.wg_server_prikey != "" ? file(var.wg_server_prikey) : "",
      admin_username    = var.admin_username,
      admin_ssh_pubkey  = file(var.ssh_key_pub),
      ssh_port          = var.ssh_port,
      wg_port           = var.wg_port,
      public_iface      = var.public_iface,
      enable_ssh_access = var.enable_ssh_access,
      extra_open_ports  = var.extra_open_ports,
      forward_ports     = var.forward_ports,
      extra_packages    = var.extra_packages,
      extra_commands    = var.extra_commands,
  })

}

# Output
output "username" {
  value = var.admin_username
}
output "ip_address" {
  value = digitalocean_droplet.tf_vm.ipv4_address
}
output "ssh_port" {
  value = var.ssh_port
}
output "wg_port" {
  value = var.wg_port
}
